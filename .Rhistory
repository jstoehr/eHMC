#        Computation Cost, Tuned epsilon, Exptected L, empirical accept probability
# --- Libraries ---
library(ggplot2)
# --- Path ---
setwd("~/git/eHMC")
source("main/process_data.R")
mod <- "Model/SIR/Diagonal/"
f.name <- paste(mod, "SIR_diagonal", sep="")
# --- Number of replicated experiment ---
n.exp <- 40
# --- Targeted Acceptance Probability ---
range.p <- seq(60, 95, by=5)
# --- Indices related to parameter of interest ---
ind.beta <- 5
ind.gamma <- 6
ind.chi <- 7
ind.phi <- 8
ind.lp <- 89
# --- Data Processing: ESS ---
ESS.NUTS.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp)
ESS.NUTS.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp)
ESS.NUT.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp)
ESS.NUT.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp)
ESS.eHMC.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp, algo = "eHMC_Summary")
result.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.NUTS.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.NUTS.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.NUT.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.NUT.phi)),
data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.eHMC.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.eHMC.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.eHMC.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.eHMC.phi)))
result.ESS[, 1] <- as.factor(result.ESS[, 1])
result.ESS[, 2] <- as.factor(result.ESS[, 2])
summary.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUT.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUT.phi$output[,2,], 2, median)),
data.frame(var = "beta: min(ESS) / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.phi$output[,2,], 2, median)))
ggplot(data = result.ESS, mapping = aes(x = p, y = min.ess)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESS, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESS.pdf", sep = "_"), device = "pdf", width = 14, height = 20, units = "cm", dpi = 600)
# --- Data Processing: ESS ---
ESJD.NUTS <- ESJD.vec(mod, n.exp, range.p)
ESJD.eHMC <- ESJD.vec(mod, n.exp, range.p, algo = "eHMC_Summary")
result.ESJD <- rbind(data.frame(var = "ESJD / gradient", transform.output(ESJD.NUTS)),
data.frame(var = "ESJD / gradient", transform.output(ESJD.eHMC)))
summary.ESJD <- rbind(data.frame(var = "ESJD / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESJD.NUTS$output[,2,], 2, median)),
data.frame(var = "ESJD / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESJD.eHMC$output[,2,], 2, median)))
# Removing the outlyer 737
ggplot(data = result.ESJD[-737, ], mapping = aes(x = p, y = esjd)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESJD, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESJD.pdf", sep = "_"), device = "pdf", width = 14, height = 10, units = "cm", dpi = 600)
x <- apply(ESS.NUTS.beta$output[,2,], 1, max)
y <- apply(ESS.eHMC.beta$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.gamma$output[,2,], 1, max)
y <- apply(ESS.eHMC.gamma$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.chi$output[,2,], 1, max)
#metric: minESS, meanESS, medianESS, maxESS       -- ess of mcmcse
#        minESS, meanESS, medianESS, maxESS       -- effectiveSize of coda
#        ESS of lp (mcmcse), ESS of lp (coda)
#        ESJD_x, ESJD_lp
#        Computation Cost, Tuned epsilon, Exptected L, empirical accept probability
# --- Libraries ---
library(ggplot2)
# --- Path ---
setwd("~/git/eHMC")
source("main/process_data.R")
mod <- "Model/SIR/Diagonal/"
f.name <- paste(mod, "SIR_diagonal", sep="")
# --- Number of replicated experiment ---
n.exp <- 40
# --- Targeted Acceptance Probability ---
range.p <- seq(60, 95, by=5)
# --- Indices related to parameter of interest ---
ind.beta <- 5
ind.gamma <- 6
ind.chi <- 7
ind.phi <- 8
ind.lp <- 89
# --- Data Processing: ESS ---
ESS.NUTS.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp)
ESS.NUTS.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp)
ESS.NUT.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp)
ESS.NUT.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp)
ESS.eHMC.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp, algo = "eHMC_Summary")
result.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.NUTS.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.NUTS.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.NUT.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.NUT.phi)),
data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.eHMC.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.eHMC.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.eHMC.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.eHMC.phi)))
result.ESS[, 1] <- as.factor(result.ESS[, 1])
result.ESS[, 2] <- as.factor(result.ESS[, 2])
summary.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUT.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUT.phi$output[,2,], 2, median)),
data.frame(var = "beta: min(ESS) / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.phi$output[,2,], 2, median)))
ggplot(data = result.ESS, mapping = aes(x = p, y = min.ess)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESS, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESS.pdf", sep = "_"), device = "pdf", width = 14, height = 20, units = "cm", dpi = 600)
# --- Data Processing: ESS ---
ESJD.NUTS <- ESJD.vec(mod, n.exp, range.p)
ESJD.eHMC <- ESJD.vec(mod, n.exp, range.p, algo = "eHMC_Summary")
result.ESJD <- rbind(data.frame(var = "ESJD / gradient", transform.output(ESJD.NUTS)),
data.frame(var = "ESJD / gradient", transform.output(ESJD.eHMC)))
summary.ESJD <- rbind(data.frame(var = "ESJD / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESJD.NUTS$output[,2,], 2, median)),
data.frame(var = "ESJD / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESJD.eHMC$output[,2,], 2, median)))
# Removing the outlyer 737
ggplot(data = result.ESJD[-737, ], mapping = aes(x = p, y = esjd)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESJD, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESJD.pdf", sep = "_"), device = "pdf", width = 14, height = 10, units = "cm", dpi = 600)
x <- apply(ESS.NUTS.chi$output[,2,], 1, max)
y <- apply(ESS.eHMC.chi$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
#metric: minESS, meanESS, medianESS, maxESS       -- ess of mcmcse
#        minESS, meanESS, medianESS, maxESS       -- effectiveSize of coda
#        ESS of lp (mcmcse), ESS of lp (coda)
#        ESJD_x, ESJD_lp
#        Computation Cost, Tuned epsilon, Exptected L, empirical accept probability
# --- Libraries ---
library(ggplot2)
# --- Path ---
setwd("~/git/eHMC")
source("main/process_data.R")
mod <- "Model/SIR/Diagonal/"
f.name <- paste(mod, "SIR_diagonal", sep="")
# --- Number of replicated experiment ---
n.exp <- 40
# --- Targeted Acceptance Probability ---
range.p <- seq(60, 95, by=5)
# --- Indices related to parameter of interest ---
ind.beta <- 5
ind.gamma <- 6
ind.chi <- 7
ind.phi <- 8
ind.lp <- 89
# --- Data Processing: ESS ---
ESS.NUTS.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp)
ESS.NUTS.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp)
ESS.NUTS.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp)
ESS.NUTS.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp)
ESS.eHMC.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp, algo = "eHMC_Summary")
result.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.NUTS.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.NUTS.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.NUTS.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.NUTS.phi)),
data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.eHMC.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.eHMC.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.eHMC.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.eHMC.phi)))
result.ESS[, 1] <- as.factor(result.ESS[, 1])
result.ESS[, 2] <- as.factor(result.ESS[, 2])
summary.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.phi$output[,2,], 2, median)),
data.frame(var = "beta: min(ESS) / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.phi$output[,2,], 2, median)))
ggplot(data = result.ESS, mapping = aes(x = p, y = min.ess)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESS, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESS.pdf", sep = "_"), device = "pdf", width = 14, height = 20, units = "cm", dpi = 600)
# --- Data Processing: ESS ---
ESJD.NUTS <- ESJD.vec(mod, n.exp, range.p)
ESJD.eHMC <- ESJD.vec(mod, n.exp, range.p, algo = "eHMC_Summary")
result.ESJD <- rbind(data.frame(var = "ESJD / gradient", transform.output(ESJD.NUTS)),
data.frame(var = "ESJD / gradient", transform.output(ESJD.eHMC)))
summary.ESJD <- rbind(data.frame(var = "ESJD / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESJD.NUTS$output[,2,], 2, median)),
data.frame(var = "ESJD / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESJD.eHMC$output[,2,], 2, median)))
# Removing the outlyer 737
ggplot(data = result.ESJD[-737, ], mapping = aes(x = p, y = esjd)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESJD, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESJD.pdf", sep = "_"), device = "pdf", width = 14, height = 10, units = "cm", dpi = 600)
x <- apply(ESS.NUTS.chi$output[,2,], 1, max)
y <- apply(ESS.eHMC.chi$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
ggplot(data = result.ESJD, mapping = aes(x = p, y = esjd)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESJD, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESJD.pdf", sep = "_"), device = "pdf", width = 14, height = 10, units = "cm", dpi = 600)
x <- apply(ESS.NUTS.chi$output[,2,], 1, max)
y <- apply(ESS.eHMC.chi$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
#metric: minESS, meanESS, medianESS, maxESS       -- ess of mcmcse
#        minESS, meanESS, medianESS, maxESS       -- effectiveSize of coda
#        ESS of lp (mcmcse), ESS of lp (coda)
#        ESJD_x, ESJD_lp
#        Computation Cost, Tuned epsilon, Exptected L, empirical accept probability
# --- Libraries ---
library(ggplot2)
# --- Path ---
setwd("~/git/eHMC")
source("main/process_data.R")
mod <- "Model/IRT//Diagonal/"
f.name <- paste(mod, "IRT_diagonal", sep="")
# --- Number of replicated experiment ---
n.exp <- 40
# --- Targeted Acceptance Probability ---
range.p <- seq(60, 95, by=5)
# --- Indices related to parameter of interest ---
ind.eta <- 2:101
ind.a <- 148:167
ind.b <- 125:144
ind.hyper <- c(123,145,146,147)
ind.lp <- 168
# c(1,102,124)  index for log(sigma_theta), log(sigma_a), log(sigma_b)
# 103:122 index for phi -- log(a)?!
# --- Data Processing: ESS ---
ESS.NUTS.eta <- ESS.vec(mod, n.exp, range.p, ind.eta, ind.lp)
ESS.NUTS.a <- ESS.vec(mod, n.exp, range.p, ind.a, ind.lp)
ESS.NUTS.b <- ESS.vec(mod, n.exp, range.p, ind.b, ind.lp)
ESS.NUTS.hyper <- ESS.vec(mod, n.exp, range.p, ind.hyper, ind.lp)
ESS.eHMC.eta <- ESS.vec(mod, n.exp, range.p, ind.eta, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.a <- ESS.vec(mod, n.exp, range.p, ind.a, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.b <- ESS.vec(mod, n.exp, range.p, ind.b, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.hyper <- ESS.vec(mod, n.exp, range.p, ind.hyper, ind.lp, algo = "eHMC_Summary")
result.ESS <- rbind(data.frame(var = "eta: min(ESS) / gradient", transform.output(ESS.NUTS.eta)),
data.frame(var = "a: min(ESS) / gradient", transform.output(ESS.NUTS.a)),
data.frame(var = "b: min(ESS) / gradient", transform.output(ESS.NUTS.b)),
data.frame(var = "eta: min(ESS) / gradient", transform.output(ESS.eHMC.eta)),
data.frame(var = "a: min(ESS) / gradient", transform.output(ESS.eHMC.a)),
data.frame(var = "b: min(ESS) / gradient", transform.output(ESS.eHMC.b)))
result.ESS[, 1] <- as.factor(result.ESS[, 1])
result.ESS[, 2] <- as.factor(result.ESS[, 2])
summary.ESS <- rbind(data.frame(var = "eta: min(ESS) / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.eta$output[,2,], 2, median)),
data.frame(var = "a: min(ESS) / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.a$output[,2,], 2, median)),
data.frame(var = "b: min(ESS) / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.b$output[,2,], 2, median)),
data.frame(var = "eta: min(ESS) / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.eta$output[,2,], 2, median)),
data.frame(var = "a: min(ESS) / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.a$output[,2,], 2, median)),
data.frame(var = "b: min(ESS) / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.b$output[,2,], 2, median)))
ggplot(data = result.ESS, mapping = aes(x = p, y = min.ess)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESS, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
x <- apply(ESS.NUTS.eta$output[,2,], 1, max)
y <- apply(ESS.eHMC.eta$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.a$output[,2,], 1, max)
y <- apply(ESS.eHMC.a$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.b$output[,2,], 1, max)
y <- apply(ESS.eHMC.b$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.beta$output[,2,], 1, max)
y <- apply(ESS.eHMC.beta$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.gamma$output[,2,], 1, max)
y <- apply(ESS.eHMC.gamma$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.chi$output[,2,], 1, max)
y <- apply(ESS.eHMC.chi$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.phi$output[,2,], 1, max)
y <- apply(ESS.eHMC.phi$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
#metric: minESS, meanESS, medianESS, maxESS       -- ess of mcmcse
#        minESS, meanESS, medianESS, maxESS       -- effectiveSize of coda
#        ESS of lp (mcmcse), ESS of lp (coda)
#        ESJD_x, ESJD_lp
#        Computation Cost, Tuned epsilon, Exptected L, empirical accept probability
# --- Libraries ---
library(ggplot2)
# --- Path ---
setwd("~/git/eHMC")
source("main/process_data.R")
mod <- "Model/SIR/Diagonal/"
f.name <- paste(mod, "SIR_diagonal", sep="")
# --- Number of replicated experiment ---
n.exp <- 40
# --- Targeted Acceptance Probability ---
range.p <- seq(60, 95, by=5)
# --- Indices related to parameter of interest ---
ind.beta <- 5
ind.gamma <- 6
ind.chi <- 7
ind.phi <- 8
ind.lp <- 89
# --- Data Processing: ESS ---
ESS.NUTS.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp)
ESS.NUTS.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp)
ESS.NUTS.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp)
ESS.NUTS.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp)
ESS.eHMC.beta <- ESS.vec(mod, n.exp, range.p, ind.beta, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.gamma <- ESS.vec(mod, n.exp, range.p, ind.gamma, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.chi <- ESS.vec(mod, n.exp, range.p, ind.chi, ind.lp, algo = "eHMC_Summary")
ESS.eHMC.phi <- ESS.vec(mod, n.exp, range.p, ind.phi, ind.lp, algo = "eHMC_Summary")
result.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.NUTS.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.NUTS.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.NUTS.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.NUTS.phi)),
data.frame(var = "beta: min(ESS) / gradient", transform.output(ESS.eHMC.beta)),
data.frame(var = "gamma: ESS / gradient", transform.output(ESS.eHMC.gamma)),
data.frame(var = "chi: ESS / gradient", transform.output(ESS.eHMC.chi)),
data.frame(var = "phi: ESS / gradient", transform.output(ESS.eHMC.phi)))
result.ESS[, 1] <- as.factor(result.ESS[, 1])
result.ESS[, 2] <- as.factor(result.ESS[, 2])
summary.ESS <- rbind(data.frame(var = "beta: min(ESS) / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESS.NUTS.phi$output[,2,], 2, median)),
data.frame(var = "beta: min(ESS) / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.beta$output[,2,], 2, median)),
data.frame(var = "gamma: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.gamma$output[,2,], 2, median)),
data.frame(var = "chi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.chi$output[,2,], 2, median)),
data.frame(var = "phi: ESS / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESS.eHMC.phi$output[,2,], 2, median)))
ggplot(data = result.ESS, mapping = aes(x = p, y = min.ess)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESS, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESS.pdf", sep = "_"), device = "pdf", width = 14, height = 20, units = "cm", dpi = 600)
# --- Data Processing: ESS ---
ESJD.NUTS <- ESJD.vec(mod, n.exp, range.p)
ESJD.eHMC <- ESJD.vec(mod, n.exp, range.p, algo = "eHMC_Summary")
result.ESJD <- rbind(data.frame(var = "ESJD / gradient", transform.output(ESJD.NUTS)),
data.frame(var = "ESJD / gradient", transform.output(ESJD.eHMC)))
summary.ESJD <- rbind(data.frame(var = "ESJD / gradient", sampler = "NUTS", p = range.p/100,
val = apply(ESJD.NUTS$output[,2,], 2, median)),
data.frame(var = "ESJD / gradient", sampler = "eHMC", p = range.p/100,
val = apply(ESJD.eHMC$output[,2,], 2, median)))
ggplot(data = result.ESJD, mapping = aes(x = p, y = esjd)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_blank()) +
scale_y_continuous(labels = function(x) format(x, scientific = F, digits = 2)) +
geom_point(alpha = 1, size = 0.4) +
facet_grid(var ~ sampler,
scales = "free_y", labeller = label_parsed) +
geom_line(data = summary.ESJD, mapping = aes(x = p, y = val), color = "red", size = 1) +
xlab("Targeted acceptance probability:" ~p[0])
ggsave(paste(f.name, "ESJD.pdf", sep = "_"), device = "pdf", width = 14, height = 10, units = "cm", dpi = 600)
x <- apply(ESS.NUTS.beta$output[,2,], 1, max)
y <- apply(ESS.eHMC.beta$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.gamma$output[,2,], 1, max)
y <- apply(ESS.eHMC.gamma$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.chi$output[,2,], 1, max)
y <- apply(ESS.eHMC.chi$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
x <- apply(ESS.NUTS.phi$output[,2,], 1, max)
y <- apply(ESS.eHMC.phi$output[,2,], 1, max)
mean(x)
sd(x)
mean(y)
sd(y)
