}
x_c <- x - mu
ans <- 0.5 * sum(x + y * y / exp(x))
ans <- ans + 0.5 * h_std[1] * h_std[1]
ans <- ans + 0.5 / (sigma_2) * sum((x_c[2:T0] - phi * x_c[1:(T0 - 1)])^2)
ans <- ans - 0.5 * log(1 - phi * phi) + T0 * gamma
ans <- ans + log(a_mu * a_mu + mu * mu) + log(a_sigma * a_sigma + sigma_2)
return(ans)
}
grad_U <- function(theta, data, a_mu = 10, a_sigma = 5) {
y <- data$y
T0 <- data$T
data$param_names[1, ] <- theta
mu <- as.numeric(data$param_names %>% select(starts_with("mu")))
alpha <- as.numeric(data$param_names %>% select(starts_with("alpha")))
gamma <- as.numeric(data$param_names %>% select(starts_with("gamma")))
h_std <- as.numeric(data$param_names %>% select(starts_with("h_std")))
# --- transformed parameter
phi <- (exp(alpha) - 1) / (exp(alpha) + 1)
sigma <-  exp(gamma)
sigma_2 <- exp(2 * gamma)
x <- h_std * exp(gamma)
x[1] <- x[1] / sqrt(1 - phi * phi)
x <- x + mu
for (i in 2:T0) {
x[i] <- x[i] + phi * (x[i - 1] - mu)
}
x_c <- x - mu
temp_diff <- x_c[2:T0] - phi * x_c[1:(T0-1)]
grad_mu <- 2 * mu / (a_mu * a_mu + mu * mu)
grad_mu <- grad_mu + (phi - 1) / sigma_2 * sum(temp_diff)
grad_mu <- grad_mu + (phi * phi - 1) / sigma_2 * x_c[1]
temp <- exp(alpha) * (phi - 1) / (sigma_2 * (1 + exp(alpha)))
grad_alpha <- temp * sum(x_c[1:(T0 - 1)] * temp_diff)
grad_alpha <- grad_alpha + 0.5 * phi
grad_alpha <- grad_alpha + phi * temp * x_c[1] * x_c[1]
grad_gamma <- -sum(temp_diff) / sigma_2 + T0 - h_std[1] * h_std[1]
grad_gamma <- grad_gamma + 2 / (1 + a_sigma * a_sigma / sigma_2)
grad_h1 <- h_std[1] + sqrt(sigma_2 / (1 - phi * phi)) * (0.5 + y[1] * exp(-x[1]))
grad_ht <- 0.5 * sigma + temp_diff/sigma
col_names_mu <- colnames(data$param_names %>% select(starts_with("mu")))
col_names_alpha <- colnames(data$param_names %>% select(starts_with("alpha")))
col_names_gamma <- colnames(data$param_names %>% select(starts_with("gamma")))
col_names_h_std <- colnames(data$param_names %>% select(starts_with("h_std")))
data$param_names[1, col_names_mu] <- grad_mu
data$param_names[1, col_names_alpha] <- grad_alpha
data$param_names[1, col_names_gamma] <- grad_gamma
data$param_names[1, col_names_h_std] <- c(grad_h1, grad_ht)
return(as.numeric(data$param_names[1, ]))
}
param_names <- data.frame(matrix(rep(NA, length(start[1, ])), 1))
colnames(param_names) <- colnames(start)
data <- list_modify(data, param_names = param_names)
U(theta, data)
log_prob(fit, theta)
head(grad_U(theta, data))
head(grad_log_prob(fit, theta))
setwd("~/git/eHMC/model/Funel")
data <- list()
fit <- stan("Funel.stan", chains = 0)
U <- function(theta, data) {
data$param_names[1, ] <- theta
y <- as.numeric(data$param_names %>% select(starts_with("y_raw")))
x <- as.numeric(data$param_names %>% select(starts_with("x_raw")))
return(0.5 * y * (y + 27) + 0.5 * sum(x * x))
}
grad_U <- function(theta, data) {
data$param_names[1, ] <- theta
col_names_y_raw <- colnames(data$param_names %>% select(starts_with("y_raw")))
data$param_names[1, col_names_y_raw] <- data$param_names[1, col_names_y_raw] + 13.5
return(as.numeric(data$param_names[1, ]))
}
load("~/git/eHMC/model/Funel/adapt_info_NUTS_Funel_diag_e_60_.RData")
param_names <- data.frame(matrix(rep(NA, length(start[1, ])), 1))
colnames(param_names) <- colnames(start)
data <- list_modify(data, param_names = param_names)
theta <- start[1,]
U(theta, data)
log_prob(fit, theta)
grad_U(theta, data)
grad_log_prob(fit, theta)
U <- function(theta, data) {
data$param_names[1, ] <- theta
y <- as.numeric(data$param_names %>% select(starts_with("y_raw")))
x <- as.numeric(data$param_names %>% select(starts_with("x_raw")))
return(0.5 * y * (y + 13.5) + 0.5 * sum(x * x))
}
grad_U <- function(theta, data) {
data$param_names[1, ] <- theta
col_names_y_raw <- colnames(data$param_names %>% select(starts_with("y_raw")))
data$param_names[1, col_names_y_raw] <- data$param_names[1, col_names_y_raw] + 13.5
return(as.numeric(data$param_names[1, ]))
}
U(theta, data)
U(theta, data) + log(3) + 5*log(2*pi)
log_prob(fit, theta)
U <- function(theta, data) {
data$param_names[1, ] <- theta
y <- 3 * as.numeric(data$param_names %>% select(starts_with("y_raw")))
x <- exp(y/2) * as.numeric(data$param_names %>% select(starts_with("x_raw")))
return(0.5 * y * (y/9 + 9 * y) + 0.5 * exp(-y) * sum(x * x))
#return(0.5 * y * (y + 13.5) + 0.5 * sum(x * x))
}
U(theta, data) + log(3) + 5*log(2*pi)
U(theta, data)
U <- function(theta, data) {
data$param_names[1, ] <- theta
y <- as.numeric(data$param_names %>% select(starts_with("y_raw")))
x <- as.numeric(data$param_names %>% select(starts_with("x_raw")))
return(0.5 * y * (y  + 27) + 0.5 * sum(x * x))
}
U(theta, data)
log_prob(fit, theta)
fit <- stan("Funel.stan", chains = 0)
rm(fit)
fit <- stan("Funel.stan", chains = 0)
log_prob(fit, theta)
theta
grad_log_prob(fit, theta)
U <- function(theta, data) {
data$param_names[1, ] <- theta
y <- as.numeric(data$param_names %>% select(starts_with("y_raw")))
x <- as.numeric(data$param_names %>% select(starts_with("x_raw")))
return(0.5 * y * y + 0.5 * sum(x * x))
#return(0.5 * y * (y  + 27) + 0.5 * sum(x * x))
}
U(theta, data)
a <- grad_lop_prob(fit, theta)
a <- grad_log_prob(fit, theta)
a
a + 3
data <- list()
param_names <- data.frame(matrix(rep(NA, length(start[1, ])), 1))
colnames(param_names) <- colnames(start)
data <- list_modify(data, param_names = param_names, fit = fit)
log_prob(data$fit, theta)
as.numeric(a)
a
b <- matrix(0, 2, 10)
b[1, ] <- a
b
a <- Inf
a <- -Inf
abs(a)
NA + 3
a <- (Inf, 1)
a <- c(Inf, 1)
a == Inf
eHMC <- function(theta, n_iter, U, grad_U, eps, emp_L,
inv_M, chol_M, data = NULL) {
current_U <- U(theta, data)
dim_theta <- length(theta)
theta <- matrix(theta, n_iter + 1, dim_theta, byrow = TRUE)
ans <- data.frame(
rho = rep(0, n_iter), L = rep(1, n_iter), div = rep(F, n_iter)
)
for (i in 1:n_iter) {
current_v <- as.numeric(chol_M %*% rnorm(dim_theta))
current_K <- current_v %*% (inv_M %*% current_v)
L <- sample(emp_L, 1)
prop <- leapfrog(theta[i, ], current_v, grad_U, eps, L, inv_M, data)
new_U <- U(prop$theta, data)
new_K <- prop$v %*% (inv_M %*% prop$v)
rho <- current_U - new_U + 0.5 * (current_K - new_K)
if (is.na(rho) || rho < log(runif(1))) {
theta[i + 1, ] <- theta[i, ]
} else {
theta[i + 1, ] <- prop$theta
current_U <- new_U
}
ans[i, ] <- c(rho, L, is.na(rho))
}
return(data.frame(theta = theta[-1, ], ans))
}
longest_batch <- function(theta, v, grad_U, eps, L,
inv_M, data = NULL, max_length = 2^12) {
prop <- list(theta = theta, v = v)
first_turn <- FALSE
cond <- 0
l <- L
for (i in 1:L) {
prop <- single_leapfrog(prop$theta, prop$v, grad_U, eps, inv_M, data)
cond <- as.numeric((prop$theta - theta) %*% (inv_M %*% prop$v))
if (is.na(cond)) {
return(list(
theta = theta, v = v, l = l,
first_turn = first_turn, div = TRUE
))
} else if (!first_turn && (cond < 0)) {
l <- i
first_turn <- TRUE
}
}
if (!first_turn) {
while (!first_turn && (l < max_length)) {
l <- l + 1
prop <- single_leapfrog(prop$theta, prop$v, grad_U, eps, inv_M, data)
cond <- as.numeric((prop$theta - theta) %*% (inv_M %*% prop$v))
if (is.na(cond)) {
return(list(
theta = theta, v = v, l = l,
first_turn = first_turn, div = TRUE
))
}
first_turn <- (cond < 0)
}
}
return(list(
theta = prop$theta, v = prop$v, l = l,
first_turn = first_turn, div = FALSE
))
}
learn_emp_dist <- function(theta, n_iter, U, grad_U, eps, L0,
inv_M, chol_M, data = NULL, max_length = 2^12) {
current_U <- U(theta, data)
dim_theta <- length(theta)
theta <- matrix(theta, n_iter + 1, dim_theta, byrow = TRUE)
ans <- data.frame(
rho = rep(0, n_iter), L = rep(L0, n_iter), l = rep(L0, n_iter),
first_turn = rep(F, n_iter), div = rep(F, n_iter)
)
for (i in 1:n_iter) {
current_v <- as.numeric(chol_M %*% rnorm(dim_theta))
current_K <- current_v %*% (inv_M %*% current_v)
L <- sample(1:L0, 1)
prop <- longest_batch(
theta[i, ], current_v, grad_U, eps, L, inv_M,
data, max_length
)
new_U <- U(prop$theta, data)
new_K <- prop$v %*% (inv_M %*% prop$v)
rho <- current_U - new_U + 0.5 * (current_K - new_K)
if (is.na(rho) || rho < log(runif(1))) {
theta[i + 1, ] <- theta[i, ]
} else {
theta[i + 1, ] <- prop$theta
current_U <- new_U
}
ans[i, ] <- c(rho, L, prop$l, prop$first_turn, prop$div)
}
return(data.frame(theta = theta[-1, ], ans))
}
leapfrog <- function(theta, v, grad_U, eps, L, inv_M, data = NULL) {
new_theta <- theta
new_v <- v - 0.5 * eps * grad_U(theta, data)
for (l in 1:(L - 1)) {
new_theta <- new_theta + eps * as.numeric(inv_M %*% new_v)
new_v <- new_v - eps * grad_U(new_theta, data)
}
new_theta <- new_theta + eps * as.numeric(inv_M %*% new_v)
return(list(
theta = new_theta,
v = new_v - 0.5 * eps * grad_U(new_theta, data)
))
}
single_leapfrog <- function(theta, v, grad_U, eps, inv_M, data) {
new_v <- v - 0.5 * eps * grad_U(theta, data)
new_theta <- theta + eps * as.numeric(inv_M %*% new_v)
new_v <- new_v - 0.5 * eps * grad_U(new_theta, data)
return(list(theta = new_theta, v = new_v))
}
model_name <- IRT
model_name <- "IRT"
# ------ Model expression for Stan
model_stan <- paste(model_name, "stan", sep = ".")
# ------ Data specification
source(paste(model_name, "R", sep = "."))
setwd("~/git/eHMC/model/IRT")
# ------ Data specification
source(paste(model_name, "R", sep = "."))
source("U_grad_U.R")
M_type <- "diag"
iter <- 500
warmup <- 10
delta <- 0.6
load("~/git/eHMC/model/IRT/adapt_info_NUTS_IRT_diag_e_60_.RData")
param_names <- data.frame(matrix(rep(NA, length(start[1, ])), 1))
colnames(param_names) <- colnames(start)
data <- list_modify(data, param_names = param_names)
i <- 1
fit <- stan(model_stan, data = data, chains = 0)
data <- list_modify(data, fit = fit)
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
emp_L <- burn_in[, "l"]
emp_L
emp_L <- emp_L[which(!burn_in[, "div"])]
emp_L
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
U <- function(theta, data) {
cat(theta,"\n")
if(sum((abs(theta) == Inf) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat(theta,"\n")
if(sum((abs(theta) == Inf) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
U <- function(theta, data) {
cat("U ", theta,"\n")
if(sum((abs(theta) == Inf) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat("grad_U ", theta,"\n")
if(sum((abs(theta) == Inf) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
U <- function(theta, data) {
cat("U ", theta,"\n")
if(sum((theta = NaN + abs(theta) == Inf) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat("grad_U ", theta,"\n")
if(sum((theta = NaN + abs(theta) == Inf) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
U <- function(theta, data) {
cat("U ", theta,"\n")
if(sum((theta == NaN + abs(theta) == Inf) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat("grad_U ", theta,"\n")
if(sum((theta == NaN + abs(theta) == Inf) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
U <- function(theta, data) {
cat("U ", theta,"\n")
if(sum((theta == NaN) + (abs(theta) == Inf) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat("grad_U ", theta,"\n")
if(sum((theta == NaN) + (abs(theta) == Inf) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
test <- NaN
test == NaN
is.nan(test)
U <- function(theta, data) {
cat("U ", theta,"\n")
if(sum((abs(theta) == Inf) + is.nan(theta) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat("grad_U ", theta,"\n")
if(sum((abs(theta) == Inf) + is.nan(theta) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
U <- function(theta, data) {
cat("U ", theta,"\n")
cat(sum((abs(theta) == Inf)),"\n")
cat(sum(is.nan(theta)), "\n")
cat(sum(is.na(theta)), "\n")
if(sum((abs(theta) == Inf) + is.nan(theta) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat("grad_U ", theta,"\n")
cat(sum((abs(theta) == Inf)),"\n")
cat(sum(is.nan(theta)), "\n")
cat(sum(is.na(theta)), "\n")
if(sum((abs(theta) == Inf) + is.nan(theta) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
U <- function(theta, data) {
cat("U ", theta,"\n")
cat(sum((abs(theta) == Inf)),"\n")
cat(sum(is.nan(theta)), "\n")
cat(sum(is.na(theta)), "\n")
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat("grad_U ", theta,"\n")
cat(sum((abs(theta) == Inf)),"\n")
cat(sum(is.nan(theta)), "\n")
cat(sum(is.na(theta)), "\n")
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
acf(ehmc_sample$theta.1)
test <- acf(ehmc_sample$theta.1)
test$lag
colMeans(matrix(1:4, 2))
apply(matrix(1:4, 2), mean, 2)
apply(matrix(1:4, 2), mean)
apply(matrix(1:4, 2), 2, mean)
sapply(matrix(1:4, 2), mean, 2)
sapply(matrix(1:4, 2), mean)
sapply(matrix(1:4, 2), mean, 1)
styler:::style_active_file()
