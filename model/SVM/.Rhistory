exp(NaN)
exp(-NaN)
exp(NA)
eHMC <- function(theta, n_iter, U, grad_U, eps, emp_L,
inv_M, chol_M, data = NULL) {
current_U <- U(theta, data)
dim_theta <- length(theta)
theta <- matrix(theta, n_iter + 1, dim_theta, byrow = TRUE)
ans <- data.frame(
rho = rep(0, n_iter), L = rep(1, n_iter), div = rep(F, n_iter)
)
for (i in 1:n_iter) {
current_v <- as.numeric(chol_M %*% rnorm(dim_theta))
current_K <- current_v %*% (inv_M %*% current_v)
L <- sample(emp_L, 1)
prop <- leapfrog(theta[i, ], current_v, grad_U, eps, L, inv_M, data)
new_U <- U(prop$theta, data)
new_K <- prop$v %*% (inv_M %*% prop$v)
rho <- current_U - new_U + 0.5 * (current_K - new_K)
if (is.na(rho) || rho < log(runif(1))) {
theta[i + 1, ] <- theta[i, ]
} else {
theta[i + 1, ] <- prop$theta
current_U <- new_U
}
ans[i, ] <- c(rho, L, is.na(rho))
}
return(data.frame(theta = theta[-1, ], ans))
}
library(rstan)
load("/Users/jstoehr/git/eHMC/model/SVM/adapt_info_NUTS_SVM_diag_e_60_.RData")
param_names <- data.frame(matrix(rep(NA, length(start[1, ])), 1))
colnames(param_names) <- colnames(start)
data <- list_modify(data, param_names = param_names)
library(tidyverse)
data <- list_modify(data, param_names = param_names)
load("SVM_PODS.RData")
data <- list(T = T.0, y = y)
load("/Users/jstoehr/git/eHMC/model/SVM/SVM_PODS.RData")
data <- list(T = T.0, y = y)
data <- list_modify(data, param_names = param_names)
setwd("~/git/eHMC/model/SVM")
model_stan <- "SVM.stan"
fit <- stan(model_stan, data = data, chains = 0)
longest_batch <- function(theta, v, grad_U, eps, L,
inv_M, data = NULL, max_length = 2^12) {
prop <- list(theta = theta, v = v)
first_turn <- FALSE
cond <- 0
l <- L
for (i in 1:L) {
prop <- single_leapfrog(prop$theta, prop$v, grad_U, eps, inv_M, data)
cond <- as.numeric((prop$theta - theta) %*% (inv_M %*% prop$v))
if (is.na(cond)) {
return(list(
theta = theta, v = v, l = l,
first_turn = first_turn, div = TRUE
))
} else if (!first_turn && (cond < 0)) {
l <- i
first_turn <- TRUE
}
}
if (!first_turn) {
while (!first_turn && (l < max_length)) {
l <- l + 1
prop <- single_leapfrog(prop$theta, prop$v, grad_U, eps, inv_M, data)
cond <- as.numeric((prop$theta - theta) %*% (inv_M %*% prop$v))
if (is.na(cond)) {
return(list(
theta = theta, v = v, l = l,
first_turn = first_turn, div = TRUE
))
}
first_turn <- (cond < 0)
}
}
return(list(
theta = prop$theta, v = prop$v, l = l,
first_turn = first_turn, div = FALSE
))
}
learn_emp_dist <- function(theta, n_iter, U, grad_U, eps, L0,
inv_M, chol_M, data = NULL, max_length = 2^12) {
current_U <- U(theta, data)
dim_theta <- length(theta)
theta <- matrix(theta, n_iter + 1, dim_theta, byrow = TRUE)
ans <- data.frame(
rho = rep(0, n_iter), L = rep(L0, n_iter), l = rep(L0, n_iter),
first_turn = rep(F, n_iter), div = rep(F, n_iter)
)
for (i in 1:n_iter) {
current_v <- as.numeric(chol_M %*% rnorm(dim_theta))
current_K <- current_v %*% (inv_M %*% current_v)
L <- sample(1:L0, 1)
prop <- longest_batch(
theta[i, ], current_v, grad_U, eps, L, inv_M,
data, max_length
)
new_U <- U(prop$theta, data)
new_K <- prop$v %*% (inv_M %*% prop$v)
rho <- current_U - new_U + 0.5 * (current_K - new_K)
if (is.na(rho) || rho < log(runif(1))) {
theta[i + 1, ] <- theta[i, ]
} else {
theta[i + 1, ] <- prop$theta
current_U <- new_U
}
ans[i, ] <- c(rho, L, prop$l, prop$first_turn, prop$div)
}
return(data.frame(theta = theta[-1, ], ans))
}
leapfrog <- function(theta, v, grad_U, eps, L, inv_M, data = NULL) {
new_theta <- theta
new_v <- v - 0.5 * eps * grad_U(theta, data)
for (l in 1:(L - 1)) {
new_theta <- new_theta + eps * as.numeric(inv_M %*% new_v)
new_v <- new_v - eps * grad_U(new_theta, data)
}
new_theta <- new_theta + eps * as.numeric(inv_M %*% new_v)
return(list(
theta = new_theta,
v = new_v - 0.5 * eps * grad_U(new_theta, data)
))
}
single_leapfrog <- function(theta, v, grad_U, eps, inv_M, data) {
new_v <- v - 0.5 * eps * grad_U(theta, data)
new_theta <- theta + eps * as.numeric(inv_M %*% new_v)
new_v <- new_v - 0.5 * eps * grad_U(new_theta, data)
return(list(theta = new_theta, v = new_v))
}
U <- function(theta, data) {
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
U <- function(theta, data) {
cat(theta, "\n")
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat(theta, "\n")
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
i <- 1
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
fit <- stan(model_stan, data = data, chains = 0)
data <- list_modify(data, fit = fit)
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
warmup <- 10
n_iter <- 20
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
emp_L <- burn_in[, "l"]
emp_L <- emp_L[which(!burn_in[, "div"])]
emp_L
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
iter <- 100
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
i <- 5
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
data$param_names
U <- function(theta, data) {
cat(theta[1:3], "\n")
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat(theta[1:3], "\n")
if(sum(is.nan(theta) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
iter <- 1000
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
iter <- 10000
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
exp(740)
exp(739)
exp(738)
exp(737)
exp(730)
exp(728)
exp(700)
exp(701)
exp(710)
exp(705)
exp(707)
exp(708)
exp(709)
a <- c(1,2)
which(a > 3)
U <- function(theta, data) {
cat(theta[1:3], "\n")
if(sum(abs(theta[2:3]) > 709) + sum(is.nan(theta) + is.na(theta)) > 0) {
return(NA)
} else {
return(-log_prob(data$fit, theta))
}
}
grad_U <- function(theta, data) {
cat(theta[1:3], "\n")
if(sum(abs(theta[2:3]) > 709) + sum(is.nan(theta) + is.na(theta)) > 0) {
return(rep(NA, length(theta)))
} else {
return(-grad_log_prob(data$fit, theta))
}
}
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
i <- 11
warmup <- 2000
iter <- 22000
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
emp_L <- burn_in[, "l"]
emp_L <- emp_L[which(!burn_in[, "div"])]
emp_L
ehmc_sample <- eHMC(start[i, ], iter - warmup,
U, grad_U,
as.numeric(eps[i]),
emp_L,
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
i <- 16
burn_in <- learn_emp_dist(start[i, ], warmup,
U, grad_U,
as.numeric(eps[i]),
L0[i],
diag(inv_M[i, ]),
diag(sqrt(inv_M[i, ])),
data = data
)
709*2
1.55 + 1.75 + 1.3
16/14
0.7+ 0.5+0.5+0.75+0.2+0.2+0.6
load("/private/var/folders/3n/qhn9nfbj7kn6gzc697p2lnyc0000gn/T/fz3temp-2/test_grad_U_SVM_diag_e_60_23_.RData")
theta
load("/private/var/folders/3n/qhn9nfbj7kn6gzc697p2lnyc0000gn/T/fz3temp-2/test_U_SVM_diag_e_60_23_.RData")
mu <- theta[1]
alpha <- theta[2]
gamma <- theta[3]
h_std <- theta[-(1:3)]
phi <- (exp(alpha) - 1) / (exp(alpha) + 1);
sigma <- exp(gamma);
h <- h_std * sigma;
h[1] <- h[1]/sqrt(1 - phi * phi);
h <- h + mu;
for (t in 2:T.0)
h[t] <- h[t] + phi * (h[t-1] - mu)
exp(h/2)
range(exp(h/2))
load("/private/var/folders/3n/qhn9nfbj7kn6gzc697p2lnyc0000gn/T/fz3temp-2/test_grad_U_SVM_diag_e_60_23_.RData")
mu <- theta[1]
alpha <- theta[2]
gamma <- theta[3]
h_std <- theta[-(1:3)]
phi <- (exp(alpha) - 1) / (exp(alpha) + 1);
sigma <- exp(gamma);
h <- h_std * sigma;
h[1] <- h[1]/sqrt(1 - phi * phi);
h <- h + mu;
for (t in 2:T.0){ h[t] <- h[t] + phi * (h[t-1] - mu) }
range(exp(h/2))
h <- h_std * sigma;
h[1] <- h[1]/sqrt(1 - phi * phi);
phi
load("/private/var/folders/3n/qhn9nfbj7kn6gzc697p2lnyc0000gn/T/fz3temp-2/test_grad_U_SVM_diag_e_60_7_.RData")
mu <- theta[1]
alpha <- theta[2]
gamma <- theta[3]
h_std <- theta[-(1:3)]
phi <- (exp(alpha) - 1) / (exp(alpha) + 1);
sigma <- exp(gamma);
h <- h_std * sigma;
h[1] <- h[1]/sqrt(1 - phi * phi);
h <- h + mu;
for (t in 2:T.0){ h[t] <- h[t] + phi * (h[t-1] - mu) }
range(exp(h/2))
phi <- -Inf
if(abs(phi) == 1){cat("toto\n")}
phi <- -1
if(abs(phi) == 1){cat("toto\n")}
if(abs(phi) >= 1){cat("toto\n")}
is.finite(range(exp(h/2)))
phi <- NaN
is.finite(phi)
phi <- Na
phi <- NA
is.finite(phi)
is.infinite(phi)
phi <- NaN
is.infinite(phi)
1/0
exp(710)
exp(-709)
data
mu <- theta[1]
alpha <- theta[2]
gamma <- theta[3]
h_std <- theta[-(1:3)]
phi <- (exp(alpha) - 1) / (exp(alpha) + 1);
sigma <- exp(gamma);
h <- h_std * sigma;
h[1] <- h[1]/sqrt(1 - phi * phi);
h <- h + mu;
for (t in 2:data$T){
h[t] <- h[t] + phi * (h[t-1] - mu)
}
abs(alpha)
abs(gamma)
abs(phi)
sigma
sum(is.finite(range(exp(h/2))))
range(exp(h/2))
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
load("/private/var/folders/3n/qhn9nfbj7kn6gzc697p2lnyc0000gn/T/fz3temp-2/test_grad_U_SVM_diag_e_60_23_.RData")
mu <- theta[1]
alpha <- theta[2]
gamma <- theta[3]
h_std <- theta[-(1:3)]
phi <- (exp(alpha) - 1) / (exp(alpha) + 1)
sigma <- exp(gamma)
h <- h_std * sigma
h[1] <- h[1] / sqrt(1 - phi * phi)
h <- h + mu
for (t in 2:data$T) {
h[t] <- h[t] + phi * (h[t - 1] - mu)
}
abs(alpha)
abs(gamma)
abs(phi)
sigma
is.infinite(range(exp(h / 2)))
h[1]
exp(h/2)
709*2
sum(h > 1418)
sum(h == 0)
sum(is.infinite(h))
sample(1:3)
sample(1:3, TRUE)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
